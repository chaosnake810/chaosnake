class RainbowClass {colors = ["#ff0000", "#ffa500", "#ffff00", "#008000", "#00ffff", "#0000ff","#800080"];element;beforeElement;speed;num;styleTag;nowStyleIndex = [];rainbowInterval;getSpeed(element) {if (element.getAttribute("speed") === null || isNaN(Number(element.getAttribute("speed")))) {this.speed = 100;} else {this.speed = Number(element.getAttribute("speed"));}return (this.speed / 1000) + "s";}setElement(element, beforeElement, num) {this.element = element;this.beforeElement = beforeElement;this.num = num;this.styleTag = document.createElement('style');this.styleTag.id = 'rainbowStyle' + this.num;document.head.appendChild(this.styleTag);}startRainbow() {this.rainbow();this.rainbowInterval = setInterval(() => {this.rainbow();}, this.speed);}setColors() {for (let i = 0; i < 7; i++) {if (this.element.getAttribute("c" + (i + 1)) !== null) {this.colors[i] = this.element.getAttribute("c" + (i + 1));}}}rainbow() {if (this.element.getAttribute("direction") === "top" || this.element.getAttribute("direction") === "bottom" || this.element.getAttribute("direction") ==="left" || this.element.getAttribute("direction") === "right") {let colorsString = this.colors[0] + "," + this.colors[1] + "," + this.colors[2] + "," + this.colors[3] + "," + this.colors[4] + "," + this.colors[5] +"," + this.colors[6];this.element.style.backgroundImage = "linear-gradient(to " + this.element.getAttribute("direction") + "," + colorsString + ")";} else {if (this.element.getAttribute("type") === "bg") {this.element.style.backgroundColor = this.colors[0];} else {for (let i = 0; i < 7; i++) {if (this.nowStyleIndex[i] !== undefined) {this.styleTag.sheet.deleteRule(this.nowStyleIndex);}this.nowStyleIndex[i] = this.styleTag.sheet.cssRules.length;this.styleTag.sheet.insertRule(".bow" + this.num + "_" + i + "{color:" +this.colors[i] + "}", this.nowStyleIndex[i]);}}}let arrayhead = this.colors[0];for (let i = 1; i < 7; i++) {this.colors[i - 1] = this.colors[i];}this.colors[6] = arrayhead;}stopRainbow() {clearInterval(this.rainbowInterval);this.styleTag.remove();if(this.beforeElement !== undefined){this.element.innerHTML = this.beforeElement;}}}let offset;let rainbowClasses = [];let rainbowTags;window.addEventListener('load', (event) => {loadRainbow();const target = document.getElementsByTagName('body')[0];const observer = new MutationObserver(records => {if (rainbowTags !== Array.from(document.getElementsByTagName('rainbow'))) {observer.disconnect();clearRainbow();loadRainbow();observer.observe(target, {childList: true,subtree: true});}});observer.observe(target, {childList: true,subtree: true});});function loadRainbow() {let bows = document.getElementsByTagName('rainbow');let bowsBeforeElements = [];for (let i = 0; i < bows.length; i++) {if (bows[i].getAttribute("type") !== "bg") {offset = 0;bowsBeforeElements[i] = bows[i].innerHTML;addBowClass(bows[i], i);if (bows[i].getAttribute("direction") === "top" || bows[i].getAttribute("direction") === "bottom" || bows[i].getAttribute("direction") === "left" ||bows[i].getAttribute("direction") === "right") {bows[i].style.webkitBackgroundClip = "text";bows[i].style.backgroundClip = "text";bows[i].style.color = "transparent";}}}for (let i = 0; i < bows.length; i++) {const ra = new RainbowClass();let speed = ra.getSpeed(bows[i]);if (bows[i].getAttribute("direction") === "top" || bows[i].getAttribute("direction") === "bottom" || bows[i].getAttribute("direction") === "left" ||bows[i].getAttribute("direction") === "right") {bows[i].style.backgroundSize = "cover";} else {if (bows[i].getAttribute("type") === "bg") {bows[i].style.transition = speed;} else {for (let j = 0; j < 7; j++) {for (k = 0; k < bows[i].getElementsByClassName('bow' + i + "_" + j).length; k++) {bows[i].getElementsByClassName('bow' + i + "_" + j)[k].style.transition =speed;}}}}ra.setElement(bows[i], bowsBeforeElements[i], i);ra.setColors();ra.startRainbow();rainbowClasses[i] = ra;}rainbowTags = Array.from(document.getElementsByTagName('rainbow'));}function clearRainbow() {for (let i = 0; i < rainbowClasses.length; i++) {rainbowClasses[i].stopRainbow();}rainbowClasses = [];}function addBowClass(element, num) {if (element.children !== undefined && element.children.length === 1 && element.childNodes.length === 1) {addBowClass(element.childNodes[0]);} else {if (element.childNodes.length <= 1) {let child;let childNodeValue;let flag;if (element.childNodes.length === 1) {flag = 0;child = element.childNodes[0].nodeValue;} else {flag = 1;child = element.nodeValue;}if (child === null) {return;}let str = "";for (let i = offset;(i - offset) < child.length; i++) {str += '<span class="bow' + num + "_" + (i % 7) + '">' + child.split("")[i -offset] + '</span>';}offset += child.length;if (flag === 0) {element.innerHTML = str;} else {let newElement = document.createElement('span');newElement.innerHTML = str;element.replaceWith(newElement);}} else {for (let i = 0; i < element.childNodes.length; i++) {addBowClass(element.childNodes[i]);}}}}